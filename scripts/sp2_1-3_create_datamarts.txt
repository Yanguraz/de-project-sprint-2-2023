/* создание таблицы tmp_sources с данными из нового внешнего источника */
DROP TABLE IF EXISTS tmp_sources;
CREATE TEMP TABLE tmp_sources AS 
SELECT  order_id,
		order_created_date,
		order_completion_date,
		order_status,
		craftsman_id,
		craftsman_name,
		craftsman_address,
		craftsman_birthday,
		craftsman_email,
		product_id,
		product_name,
		product_description,
		product_type,
		product_price,
		cpo.customer_id,
		customer_name,
		customer_address,
		customer_birthday,
		customer_email 
 FROM external_source.craft_products_orders cpo 
 JOIN external_source.customers c on cpo.customer_id=c.customer_id
;

/* Обновление существующих записей и добавление новых в dwh.d_craftsmans */
MERGE INTO dwh.d_craftsman d
USING (SELECT DISTINCT craftsman_name, craftsman_address, craftsman_birthday, craftsman_email FROM tmp_sources) t
ON d.craftsman_name = t.craftsman_name AND d.craftsman_email = t.craftsman_email
WHEN MATCHED THEN
  UPDATE SET craftsman_address = t.craftsman_address, 
craftsman_birthday = t.craftsman_birthday, load_dttm = current_timestamp
WHEN NOT MATCHED THEN
  INSERT (craftsman_name, craftsman_address, craftsman_birthday, craftsman_email, load_dttm)
  VALUES (t.craftsman_name, t.craftsman_address, t.craftsman_birthday, t.craftsman_email, current_timestamp);

/* обновление существующих записей и добавление новых в dwh.d_products*/
MERGE INTO dwh.d_product d
USING (SELECT DISTINCT product_name, product_description, product_type, product_price from tmp_sources) t
ON d.product_name = t.product_name AND d.product_description = t.product_description AND d.product_price = t.product_price
WHEN MATCHED THEN
  UPDATE SET product_type= t.product_type, load_dttm = current_timestamp
WHEN NOT MATCHED THEN
  INSERT (product_name, product_description, product_type, product_price, load_dttm)
  VALUES (t.product_name, t.product_description, t.product_type, t.product_price, current_timestamp);

/* обновление существующих записей и добавление новых в dwh.d_customer*/
MERGE INTO dwh.d_customer d
USING (SELECT DISTINCT customer_name, customer_address, customer_birthday, customer_email from tmp_sources) t
ON d.customer_name = t.customer_name AND d.customer_email = t.customer_email
WHEN MATCHED THEN
  UPDATE SET customer_address= t.customer_address, 
customer_birthday= t.customer_birthday, load_dttm = current_timestamp
WHEN NOT MATCHED THEN
  INSERT (customer_name, customer_address, customer_birthday, customer_email, load_dttm)
  VALUES (t.customer_name, t.customer_address, t.customer_birthday, t.customer_email, current_timestamp);
 
 /* создание таблицы tmp_sources_fact */
DROP TABLE IF EXISTS tmp_sources_fact;
CREATE TEMP TABLE tmp_sources_fact AS 
select  src.product_id,
        src.craftsman_id,
        src.customer_id,
        order_created_date,
        order_completion_date,
        order_status,
        cust.load_dttm
FROM tmp_sources src
JOIN dwh.d_craftsman crf on src.craftsman_id=crf.craftsman_id
JOIN dwh.d_product crp on src.product_id=crp.product_id
JOIN dwh.d_customer cust on src.customer_id=cust.customer_id
LIMIT 1;
    
/* Код запроса */

/* Обновление существующих записей и добавление новых в dwh.f_order */
MERGE INTO dwh.f_order f
USING tmp_sources_fact t
ON f.product_id = t.product_id AND f.craftsman_id = t.craftsman_id AND f.customer_id = t.customer_id AND f.order_created_date = t.order_created_date 
WHEN MATCHED THEN
  UPDATE SET order_completion_date = t.order_completion_date, order_status = t.order_status, load_dttm = current_timestamp
WHEN NOT MATCHED THEN
  INSERT (product_id, craftsman_id, customer_id, order_created_date, order_completion_date, order_status, load_dttm)
  VALUES (t.product_id, t.craftsman_id, t.customer_id, t.order_created_date, t.order_completion_date, t.order_status, current_timestamp);


-- DDL витрины данных
DROP TABLE dwh.customer_report_datamart;

CREATE table if not exists dwh.customer_report_datamart (
id BIGINT GENERATED ALWAYS AS IDENTITY NOT NULL, -- идентификатор записи
customer_id BIGINT NOT NULL, -- идентификатор заказчика
customer_name VARCHAR NOT NULL, -- Ф. И. О. заказчика
customer_address VARCHAR NOT NULL, -- адрес заказчика
customer_birthday DATE NOT NULL, -- дата рождения заказчика
customer_email VARCHAR NOT NULL, -- электронная почта заказчика
customer_money NUMERIC(15,2) NOT NULL, -- сумма, которую потратил заказчик
platform_money BIGINT NOT NULL, -- сумма, которую заработала платформа от покупок заказчика за месяц (10% от суммы, которую потратил заказчик)
count_order BIGINT NOT NULL, -- количество заказов у заказчика за месяц
avg_price_customer BIGINT NOT NULL, -- средняя стоимость одного заказа у заказчика за месяц
median_time_order_completed numeric NUMERIC(10,1), -- медианное время в днях от момента создания заказа до его завершения за месяц
top_product_category varchar VARCHAR NOT NULL,  -- самая популярная категория товаров у этого заказчика за месяц
top_craftsman VARCHAR NOT NULL,  -- идентификатор самого популярного мастера ручной работы у заказчика. Если заказчик сделал одинаковое количество заказов у нескольких мастеров, возьмите любого
count_order_created BIGINT NOT NULL, -- количество созданных заказов за месяц
count_order_in_progress BIGINT NOT NULL, -- количество заказов в процессе изготовки за месяц
count_order_delivery BIGINT NOT NULL, -- количество заказов в доставке за месяц
count_order_done BIGINT NOT NULL, -- количество завершённых заказов за месяц
count_order_not_done BIGINT NOT NULL, -- количество незавершённых заказов за месяц
report_period VARCHAR NOT NULL, -- отчётный период, год и месяц
CONSTRAINT customer_report_datamart_pk PRIMARY KEY (id));


-- DDL таблицы инкрементальных загрузок
DROP TABLE IF EXISTS dwh.load_dates_customer_report_datamart;

CREATE TABLE IF NOT EXISTS dwh.load_dates_customer_report_datamart (
id bigint generated always as identity not null,
load_dttm date not null,
CONSTRAINT load_dates_customer_report_datamart_pk PRIMARY KEY(id)
);
